# source: http://localhost:4466
# timestamp: Fri Aug 24 2018 23:29:49 GMT+0200 (czas Å›rodkowoeuropejski letni)

type AggregateJobInfoDetail {
  count: Int!
}

type AggregateQueueJobs {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

enum jobGroupList {
  ROUTEPLAN
  LOAD3D
  HYBRID
}

type JobInfoDetail {
  jobGroup: jobGroupList!
  jobType: jobTypeList!
}

"""A connection to a list of items."""
type JobInfoDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [JobInfoDetailEdge]!
  aggregate: AggregateJobInfoDetail!
}

input JobInfoDetailCreateInput {
  jobGroup: jobGroupList!
  jobType: jobTypeList!
}

input JobInfoDetailCreateOneInput {
  create: JobInfoDetailCreateInput
}

"""An edge in a connection."""
type JobInfoDetailEdge {
  """The item at the end of the edge."""
  node: JobInfoDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum JobInfoDetailOrderByInput {
  jobGroup_ASC
  jobGroup_DESC
  jobType_ASC
  jobType_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type JobInfoDetailPreviousValues {
  jobGroup: jobGroupList!
  jobType: jobTypeList!
}

type JobInfoDetailSubscriptionPayload {
  mutation: MutationType!
  node: JobInfoDetail
  updatedFields: [String!]
  previousValues: JobInfoDetailPreviousValues
}

input JobInfoDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [JobInfoDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [JobInfoDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [JobInfoDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: JobInfoDetailWhereInput
}

input JobInfoDetailUpdateDataInput {
  jobGroup: jobGroupList
  jobType: jobTypeList
}

input JobInfoDetailUpdateInput {
  jobGroup: jobGroupList
  jobType: jobTypeList
}

input JobInfoDetailUpdateOneInput {
  create: JobInfoDetailCreateInput
  disconnect: Boolean
  delete: Boolean
  update: JobInfoDetailUpdateDataInput
  upsert: JobInfoDetailUpsertNestedInput
}

input JobInfoDetailUpsertNestedInput {
  update: JobInfoDetailUpdateDataInput!
  create: JobInfoDetailCreateInput!
}

input JobInfoDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [JobInfoDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [JobInfoDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [JobInfoDetailWhereInput!]
  jobGroup: jobGroupList

  """All values that are not equal to given value."""
  jobGroup_not: jobGroupList

  """All values that are contained in given list."""
  jobGroup_in: [jobGroupList!]

  """All values that are not contained in given list."""
  jobGroup_not_in: [jobGroupList!]
  jobType: jobTypeList

  """All values that are not equal to given value."""
  jobType_not: jobTypeList

  """All values that are contained in given list."""
  jobType_in: [jobTypeList!]

  """All values that are not contained in given list."""
  jobType_not_in: [jobTypeList!]
}

enum jobTypeList {
  PACK3D
  TSP
  VRPAQ
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createQueueJobs(data: QueueJobsCreateInput!): QueueJobs!
  createJobInfoDetail(data: JobInfoDetailCreateInput!): JobInfoDetail!
  updateQueueJobs(data: QueueJobsUpdateInput!, where: QueueJobsWhereUniqueInput!): QueueJobs
  deleteQueueJobs(where: QueueJobsWhereUniqueInput!): QueueJobs
  upsertQueueJobs(where: QueueJobsWhereUniqueInput!, create: QueueJobsCreateInput!, update: QueueJobsUpdateInput!): QueueJobs!
  updateManyQueueJobses(data: QueueJobsUpdateInput!, where: QueueJobsWhereInput): BatchPayload!
  updateManyJobInfoDetails(data: JobInfoDetailUpdateInput!, where: JobInfoDetailWhereInput): BatchPayload!
  deleteManyQueueJobses(where: QueueJobsWhereInput): BatchPayload!
  deleteManyJobInfoDetails(where: JobInfoDetailWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  queueJobses(where: QueueJobsWhereInput, orderBy: QueueJobsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QueueJobs]!
  jobInfoDetails(where: JobInfoDetailWhereInput, orderBy: JobInfoDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [JobInfoDetail]!
  queueJobs(where: QueueJobsWhereUniqueInput!): QueueJobs
  queueJobsesConnection(where: QueueJobsWhereInput, orderBy: QueueJobsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QueueJobsConnection!
  jobInfoDetailsConnection(where: JobInfoDetailWhereInput, orderBy: JobInfoDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobInfoDetailConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type QueueJobs implements Node {
  id: ID!
  customerId: String
  jobInfo(where: JobInfoDetailWhereInput): JobInfoDetail
  params: Json!
  dataIn: Json!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type QueueJobsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QueueJobsEdge]!
  aggregate: AggregateQueueJobs!
}

input QueueJobsCreateInput {
  customerId: String
  params: Json!
  dataIn: Json!
  status: String
  jobInfo: JobInfoDetailCreateOneInput
}

"""An edge in a connection."""
type QueueJobsEdge {
  """The item at the end of the edge."""
  node: QueueJobs!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QueueJobsOrderByInput {
  id_ASC
  id_DESC
  customerId_ASC
  customerId_DESC
  params_ASC
  params_DESC
  dataIn_ASC
  dataIn_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QueueJobsPreviousValues {
  id: ID!
  customerId: String
  params: Json!
  dataIn: Json!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QueueJobsSubscriptionPayload {
  mutation: MutationType!
  node: QueueJobs
  updatedFields: [String!]
  previousValues: QueueJobsPreviousValues
}

input QueueJobsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QueueJobsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QueueJobsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QueueJobsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QueueJobsWhereInput
}

input QueueJobsUpdateInput {
  customerId: String
  params: Json
  dataIn: Json
  status: String
  jobInfo: JobInfoDetailUpdateOneInput
}

input QueueJobsWhereInput {
  """Logical AND on all given filters."""
  AND: [QueueJobsWhereInput!]

  """Logical OR on all given filters."""
  OR: [QueueJobsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QueueJobsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  customerId: String

  """All values that are not equal to given value."""
  customerId_not: String

  """All values that are contained in given list."""
  customerId_in: [String!]

  """All values that are not contained in given list."""
  customerId_not_in: [String!]

  """All values less than the given value."""
  customerId_lt: String

  """All values less than or equal the given value."""
  customerId_lte: String

  """All values greater than the given value."""
  customerId_gt: String

  """All values greater than or equal the given value."""
  customerId_gte: String

  """All values containing the given string."""
  customerId_contains: String

  """All values not containing the given string."""
  customerId_not_contains: String

  """All values starting with the given string."""
  customerId_starts_with: String

  """All values not starting with the given string."""
  customerId_not_starts_with: String

  """All values ending with the given string."""
  customerId_ends_with: String

  """All values not ending with the given string."""
  customerId_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  jobInfo: JobInfoDetailWhereInput
}

input QueueJobsWhereUniqueInput {
  id: ID
}

type Subscription {
  queueJobs(where: QueueJobsSubscriptionWhereInput): QueueJobsSubscriptionPayload
  jobInfoDetail(where: JobInfoDetailSubscriptionWhereInput): JobInfoDetailSubscriptionPayload
}
